[comment encoding = UTF-8 /]
[module genSails('http://www.eclipse.org/uml2/4.0.0/UML')]


[template public generate(aClass : Class)]
[comment @main/]
[file ('api/models/'.concat(aClass.name).concat('.js'), false, 'UTF-8')]
/**
* [aClass.name.concat('.js')/]
*
* @description :: TODO: You might write a short summary of how this model works and what it represents here.
* @docs        :: http://sailsjs.org/#!documentation/models
*/
module.exports = {
  
  attributes: {
	[aClass.attribute.genAttribute()/]
	[aClass.getAssociations().genAssociations(aClass)/]
  }
};
[/file]
[file ('api/controllers/'.concat(aClass.name).concat('Controller.js'), false, 'UTF-8')]
/**
 * [aClass.name.concat('.js')/]
 *
 * @description ::
 * @docs        :: http://sailsjs.org/#!documentation/controllers
 */

module.exports = {
    [aClass.getOperations().genOperations()/]
};
[/file]
[/template]


[**
 * Generates attribute code (name and type). 
 * @param p UML Property.
*/]
[template public genAttribute(p : Property) post (trim().concat(',\n'))]
	[p.name/]: {
		type: "[p.type.name/]",
		required: true,
		[if (p.name.contains('id') and p.type.name = 'Integer')]
		primaryKey: true,
		autoIncrement: true
		[/if]
	}
[/template]

[**
 * Generates attribute code (name and type). 
 * @param p UML Property.
*/]
[template public genOperations(p : Operation) post (trim().concat(',\n'))]
	[p.name/]: function () {
		
	}
[/template]

[**
 * Generates attribute code (name and type). 
 * @param p UML Property.
*/]
[template public genParameters(p : Parameter) post (trim())]
	[if (direction <> ParameterDirectionKind::return)]
	[if (p.type.name <> null)]
		[p.type.name.toLowerFirst()/],
	[/if]
	[/if]
[/template]

[**
 * Generates attribute code (name and type). 
 * @param p UML Property.
*/]
[template public genAssociations(a : Association, c : Class) post (trim().concat(',\n'))]
	[if (c.name = a.memberEnd->at(1).type.name)]
	[if a.memberEnd->at(2).name <> '']
	[a.memberEnd->at(2).name/]: {
		[if (a.memberEnd->at(2).upper = -1 or a.memberEnd->at(2).upper > 1)]
		collection: "[a.memberEnd->at(2).type.name/]",
		via: "[a.memberEnd->at(1).name/]"
		[else]
		model: "[a.memberEnd->at(2).type.name/]"
		[/if]
	}
	[/if]
	[else]
	[if a.memberEnd->at(1).name <> '']
	[a.memberEnd->at(1).name/]: {
		[if (a.memberEnd->at(1).upper = -1 or a.memberEnd->at(1).upper > 1)]
		collection: "[a.memberEnd->at(1).type.name/]",
		via: "[a.memberEnd->at(2).name/]"
		[else]
		model: "[a.memberEnd->at(1).type.name/]"
		[/if]
	}
	[/if]
	[/if]
[/template]


[**
 * Generates attribute code (name and type). 
 * @param p UML Property.
*/]
[template public genType(t : Type)]
[/template]
